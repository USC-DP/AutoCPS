import os

# Base class to generate an autocoded params.h and autocode lib
class CodeGeneration:
    # File objects to write to
    params_h = None
    autocode_h = None
    autocode_c = None

    # Initialize by opening files
    def __init__(self):
        workdir = os.path.basename(os.getcwd())
        output_dir = os.path.join(workdir, 'output')

        # Make output directory if needed
        try:
            os.mkdir(output_dir)
        except FileExistsError:
            pass

        self.params_h = open(os.path.join(output_dir, 'params.h'), 'w')
        self.autocode_h = open(os.path.join(output_dir, 'autocode.h'), 'w')
        self.autocode_c = open(os.path.join(output_dir, 'autocode.cc'), 'w')

    # By closing files
    def __del__(self):
        self.params_h.close()
        self.autocode_h.close()
        self.autocode_c.close()

    def generate_params(self, system):
        self.params_h.write('/*\n')
        self.params_h.write(' * Common FSW parameters, autogenerated by Python\n')
        self.params_h.write(' */\n\n')
        self.params_h.write('#ifndef PARAMS_H\n')
        self.params_h.write('#define PARAMS_H\n\n')
        self.params_h.write('#include "datatypes.h"\n\n')
        self.params_h.write('#include <cmath>\n\n')
        self.params_h.write('enum SystemType {SYS_ROVER, SYS_PLANE, SYS_ROCKET, SYS_HELICOPTER};\n')

        self.params_h.write('const double mass = {};\n'.format(system.mass))
        self.params_h.write('const double dimensions[3] = { {}, {}, {} };\n\n'.format(
            system.dimensions[0], system.dimensions[1], system.dimensions[2]))
        self.params_h.write('const SystemType fsw_system = ')

        if system.type == 'rover':
            self.params_h.write('SYS_ROVER;\n\n')
        elif system.type == 'plane':
            self.params_h.write('SYS_PLANE;\n\n')
        elif system.type == 'rocket':
            self.params_h.write('SYS_ROCKET;\n\n')
        elif system.type == 'helicopter':
            self.params_h.write('SYS_HELICOPTER;\n\n')

        if system.jpl_quaternion is True:
            self.params_h.write('#define JPL_QUATERNION\n\n')

        self.params_h.write('#define POS_MAX_ERROR 0.5\n')
        self.params_h.write('#define SYS_PI acos(-1.0)\n\n')

        self.params_h.write('#define ATT_MAX_ROLL_ANGLE 0.25 * SYS_PI\n')
        self.params_h.write('#define ATT_MAX_PITCH_ANGLE 0.25 * SYS_PI\n')
        self.params_h.write('#define ATT_MAX_YAW_ANGLE 0.25 * SYS_PI\n\n')

        self.params_h.write('#define ATT_MAX_ROTATION_RATE SYS_PI\n')
        self.params_h.write('#define ATT_MAX_CLIMB_RATE 100\n\n')

        self.params_h.write('#define ATT_MAX_ROLL 100\n')
        self.params_h.write('#define ATT_MAX_PITCH 100\n')
        self.params_h.write('#define ATT_MAX_YAW 100\n\n')

        self.params_h.write('#define CLOCK_TICKS_PER_SEC 100.0f\n\n')

        if system.type == 'helicopter':
            self.params_h.write('#define NUM_PROPS 2\n')
            self.params_h.write('const double PROPELLERS[NUM_PROPS][3] = { {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0} };\n')
            self.params_h.write('const double PROP_THRUSTS[NUM_PROPS] = {0.0, 0.0};\n\n')
        elif system.type == 'plane':
            self.params_h.write('#define NUM_ENGINES 2\n')
            self.params_h.write('const double engines[NUM_ENGINES][3] = { {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0} };\n')
            self.params_h.write('#define STALL_SPEED 10\n')
            self.params_h.write('#define MAX_SPEED 100\n\n')
        elif system.type == 'rover':
            self.params_h.write('#define NUM_MOTORS 2\n')
            self.params_h.write('const double motors[NUM_ENGINES][3] = { {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0} };\n')
            self.params_h.write('const double motor_max_speeds[NUM_ENGINES] = {0.0, 0.0};\n\n')
        elif system.type == 'rocket':
            self.params_h.write('const double i_sp = 100.0;\n')
            self.params_h.write('const double max_fuel = 100.0;\n')
            self.params_h.write('const double mass_flow_rate = 10.0;\n\n')

        self.params_h.write('#endif\n')